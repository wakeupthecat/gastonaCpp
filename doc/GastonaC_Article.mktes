first of all, what is Gastona and what is good for ? 


Gastona can be defined as the art of developing GUI applications 
without programming a line of code. Since just this sentence can hardly
describe it of course I have to add "and much more". But let's by now 
only focus in the idea of programming or not programming some GUI.

The article "EvaLayout let it be!" shows how easy is to layout 
GUI components in a window without the need of "burning" it in C code.
This flexible approach is good not only for quick development but also
for improvements, mantenibility etc.

GastonaC uses exactly the same EvaLayout and LayoutManager but 
additionally it also creates the components programatically. So based on the text
that configures the layout, the GUI is completely created.

So to concretize it with an example, the text

   #javaj#
      
      <layout of main>
          EVALAYOUT, 5, 5, 3, 3
          
                , A    , X    , A
             A  , lFile, eFile, bLoad
             X  , xContent, -, -
                
is enough to create the window

         ------------------
         ------------------
         
But what then ? How the widgets get's its data and how we can handle 
the user interaction with them ?


--- Reducing complexity of widgets

Certanly ... is a very hard task even for apparently simple widgets like a button or a list.
Why the complexity could be justify with the possibilities of getting functionality
or new aspects from the widget for the sake of "normal" use makes this programming 
too difficult to ...

The way is simply reduce the functionality to the minimum needed and prepare a preprogrammed
widget .... 

but Gastona does not determine how complex or simple a widget has to be 

we just define a protocol between widgets and our developing system based on messages
and some data space that we will simply "data".

---- Data

Data is a container for variables, text based and text named variables

Each widget owns all variables named starting with the widget's name

for example a list called iLista may own the variables "iLista", "iLista selected.name" etc

Data is accesible from the logic and it can be changed. This is the way we provide data to
the widget.

When the user interacts with the widget, this can change the state of the widget variables
or even create new ones







